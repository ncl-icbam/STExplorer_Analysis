---
title: "8PCW Retina analysis using STExplorer (HVGs)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
author: 'Adrienne Unsworth'
format: 
  html:
    page-layout: full
    code-fold: true
    self-contained: true
editor: source
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, eval = T
)
```

# Summary

Of the 4 slices only two appear to be comparable - A1 and D1. B1 clusters strangely using FGWC (only delineating major eye structures vs major eye structures plus retinal layers) and C1, whilst congruent with the other slices, is missing a large chunk of tissue. Samples consist of the following numbers of spots: A1: 330; B1: 327; C1: 266 and D1: 368. Given that the number of spots per slide is around \~5000, each tissue covers less than 10% of the capture area.

Of these analyses, every gene identified using FGWC was present in the original publication.

In A1, C1 and D1 there appears to be a cluster that bridges the OS, CMZ and retina. However, the factors that contribute to this appear to be a mixture of MT, RPE/RPC and haem genes. I'm unclear if the haem genes are significant or not - this may simply be contamination. I'm assuming the MT are likely to be technical. RPE/RPC genes in these factors were mostly RPE genes, with the RPC genes *ID3* and *SFRP2*. Both *ID3* and *SFRP2* were identified in the original publication.


I have focused on D1, as it appears to be the best quality sample.


```{r, eval=T, warning=FALSE, message=FALSE}
library(STExplorer)
library(readr)
library(RColorBrewer)
library(biomaRt)
library(tidyverse)
library(scran)
library(Voyager)

# A1 <- readRDS("sfe_HVGs_A1.rds")
# B1 <- readRDS("sfe_HVGs_B1.rds")
# C1 <- readRDS("sfe_HVGs_C1.rds")
D1 <- readRDS("sfe_HVGs_D1.rds")

markers <- readRDS("markers.rds")
top_hvgs <- readRDS("top_hvgs.rds")
fgwc_list <- readRDS("fgwc_list_HVG.rds")

early_RPC_markers <- c("SFRP2", "RAX", "PAX6", "VSX2", "ZIC2", "ZIC1", "SIX3", "SIX6")

# A1_8PCW_HVG_nmf_factors <- read_csv("A1_8PCW_HVG_nmf_factors.csv",  col_types = cols(...1 = col_skip()))
# B1_8PCW_HVG_nmf_factors <- read_csv("B1_8PCW_HVG_nmf_factors.csv",  col_types = cols(...1 = col_skip()))
# C1_8PCW_HVG_nmf_factors <- read_csv("C1_8PCW_HVG_nmf_factors.csv",  col_types = cols(...1 = col_skip()))
D1_8PCW_HVG_nmf_factors <- read_csv("D1_8PCW_HVG_nmf_factors.csv",  col_types = cols(...1 = col_skip()))

ensembl_df <- readRDS("ensembl_df.rds")
```

```{r, eval = F}
A1$fuzzy_winning_cl <- factor(fgwc_list[['A1']]$cluster)
B1$fuzzy_winning_cl <- factor(fgwc_list[['B1']]$cluster)
C1$fuzzy_winning_cl <- factor(fgwc_list[['C1']]$cluster)
D1$fuzzy_winning_cl <- factor(fgwc_list[['D1']]$cluster)

gs <- modelGeneVar(A1)
hvgs <- getTopHVGs(gs, fdr.threshold = 0.01)
A1 <- scran::fixedPCA(A1, subset.row = hvgs)
A1$sc_clusters <- scran::clusterCells(A1, use.dimred = 'PCA')

gs <- modelGeneVar(B1)
hvgs <- getTopHVGs(gs, fdr.threshold = 0.01)
B1 <- scran::fixedPCA(B1, subset.row = hvgs)
B1$sc_clusters <- scran::clusterCells(B1, use.dimred = 'PCA')

gs <- modelGeneVar(C1)
hvgs <- getTopHVGs(gs, fdr.threshold = 0.01)
C1 <- scran::fixedPCA(C1, subset.row = hvgs)
C1$sc_clusters <- scran::clusterCells(C1, use.dimred = 'PCA')

gs <- modelGeneVar(D1)
hvgs <- getTopHVGs(gs, fdr.threshold = 0.01)
D1 <- scran::fixedPCA(D1, subset.row = hvgs)
D1$sc_clusters <- scran::clusterCells(D1, use.dimred = 'PCA')

markers_fuzzy_A1 <- findMarkers(A1, A1$fuzzy_winning_cl, row.data = rowData(A1))
markers_A1 <- findMarkers(A1, A1$sc_clusters, row.data = rowData(A1))
saveRDS(markers_fuzzy_A1, "markers_fuzzy_A1.rds")
saveRDS(markers_A1, "markers_HVGs_NNgraph_A1.rds")

markers_fuzzy_B1 <- findMarkers(B1, B1$fuzzy_winning_cl, row.data = rowData(B1))
markers_B1 <- findMarkers(B1, B1$sc_clusters, row.data = rowData(B1))
saveRDS(markers_fuzzy_B1, "markers_fuzzy_B1.rds")
saveRDS(markers_B1, "markers_HVGs_NNgraph_B1.rds")

markers_fuzzy_C1 <- findMarkers(C1, C1$fuzzy_winning_cl, row.data = rowData(C1))
markers_C1 <- findMarkers(C1, C1$sc_clusters, row.data = rowData(C1))
saveRDS(markers_fuzzy_C1, "markers_fuzzy_C1.rds")
saveRDS(markers_C1, "markers_HVGs_NNgraph_C1.rds")

markers_fuzzy_D1 <- findMarkers(D1, D1$fuzzy_winning_cl, row.data = rowData(D1))
markers_D1 <- findMarkers(D1, D1$sc_clusters, row.data = rowData(D1))
saveRDS(markers_fuzzy_D1, "markers_fuzzy_D1.rds")
saveRDS(markers_D1, "markers_HVGs_NNgraph_D1.rds")

saveRDS(A1, "sfe_HVGs_A1.rds")
saveRDS(B1, "sfe_HVGs_B1.rds")
saveRDS(C1, "sfe_HVGs_C1.rds")
saveRDS(D1, "sfe_HVGs_D1.rds")
```

```{r, eval = F}
ensembl <- useEnsembl(biomart = 'genes', 
                       dataset = 'hsapiens_gene_ensembl',
                       version = 98)

ensembl_df <-
  getBM(attributes = c("transcript_biotype", "ensembl_gene_id", "external_gene_name", "go_id", "name_1006"),
        mart = ensembl, filters = 'go', values = c('GO:0001764'))

cell_mig_markers <- ensembl_df[1:3] %>% distinct(external_gene_name, .keep_all = T)
saveRDS(cell_mig_markers, 'cell_mig_markers.rds')
```

## D1


### Fig A

```{r}
plotQC_spotsAnnotation(D1, type = "hex", sample_id = "D1")# + theme(legend.position="none")
```

```{r}
plotFGWC_singleMap(fgwc = fgwc_list[['D1']], m_sfe = D1, sample_id = 'D1')
```

### Fig B

```{r}
plotFGWC_pie(fgwc = fgwc_list[['D1']],
             m_sfe = D1,
             sample_id = 'D1',
             mapping = aes(pie = cluster, donut = factors))
```

### Fig ?

```{r, fig.height=15, fig.width=10}
plotFGWC_multiMap(fgwc = fgwc_list[['D1']], D1, )
```

```{r}
sfe_nmf_list <- list()
sfe_nmf_list[['D1']] <- fgwc_nmf(m_sfe = D1,
                                sample_id = 'D1',
                                top_hvgs = top_hvgs[['D1']],
                                ncomponents = 5)
```

### Fig C

```{r}
plotFGWC_nmfFactorsMap(nmf = sfe_nmf_list[['D1']],
                               m_sfe = D1,
                               sample_id = 'D1')
```


### D

```{r}
heatmap <- plotFGWC_nmfMetagenesHeatmap(fgwc = fgwc_list[['D1']])
```

```{r}
ensembl_markers <- ensembl_df[ensembl_df$transcript_biotype == 'protein_coding', ]
ensembl_markers <- ensembl_markers[,c(2, 3)]

ensembl_markers <- ensembl_markers[ensembl_markers$ensembl_gene_id %in% heatmap$tree_row$labels,]

rownames(fgwc_list[['D1']]$metageneSignatures) == heatmap$tree_row$labels

new_gene_names <- ensembl_markers %>% arrange(factor(ensembl_gene_id, levels = heatmap$tree_row$labels)) %>% select(external_gene_name)

```

```{r}
rownames(fgwc_list[['D1']]$metageneSignatures) <- new_gene_names$external_gene_name

```

```{r}
heatmap <- plotFGWC_nmfMetagenesHeatmap(fgwc = fgwc_list[['D1']])

```


```{r}
RPC = unique(c("RAX", "SOX2", "DAPL1", "CKB", "PTTG1", "CENPF", "HMGB2", "DAPL1", "CKB", "RORB", "SOX2", "SFRP2", "DAPL1", "CKB", "UBE2C"))
RGCs = unique(c("CNTN2", "PRPH", "GAP43", "STMN2", "CRABP1", "PRPH", "MIAT", "NSG1", "SNCG", "STMN2", "CRABP1"))
cones = c("PDE6H", "HIST1H4C", "DEK", "RCVRN", "TFF1")
hcs = c("ONECUT2")
os = c('PAX2', 'PAX5', 'ZIC1')
T1 = c("ATOH7")
T2 = c("PTF1A")
markers = tibble(gene.name = c(RPC, RGCs, cones, hcs, os, T1, T2), Type = c(rep_len("RPC", length(RPC)), rep_len("RGCs", length(RGCs)), rep_len("Cones", length(cones)), rep_len("HCs", length(hcs)), rep_len("OS", length(os)), rep_len("T1", length(T1)), rep_len("T2", length(T2))), Subtype = "")


ensembl_markers <- ensembl_df[ensembl_df$external_gene_name %in% markers$gene.name & ensembl_df$transcript_biotype == 'protein_coding',]
markers <- merge(markers, ensembl_markers[2:3], by.x = 'gene.name', by.y = 'external_gene_name')

colnames(markers)[4] <- 'ensg.ID'

#markers <- markers[markers$gene.name %notin% c('RORB', 'STMN2'),]

markers |> knitr::kable(format = "markdown")



```


### Fig E

```{r}
cluster_no <- 7

## Plot the heatmap
heatmap <- plotFGWC_markersHeatmap(fgwc = fgwc_list[['D1']],
                                   m_sfe = D1,
                                   sample_id = 'D1',
                                   markers = markers,
                                   cluster_no = cluster_no,
                                   cutree_cols = 2 )

# ncomp = ncol(fgwc_list[[s]]$membership)
# ncluster = fgwc_list[[s]]$call$ncluster
# a = fgwc_list[[s]]$call$a
# m = fgwc_list[[s]]$call$m
# ggplot2::ggsave(paste0(folder, s, "_markersHeatMap", cluster_no,
#                        "_NMF-", ncomp, "_clust-", ncluster, "_a-", a, "_m-", m, ".svg"),
#                 device = "svg",
#                 width = grDevices::dev.size(units = "in")[1],
#                 height = grDevices::dev.size(units = "in")[2],
#                 units = "in",
#                 dpi = 300)
```


```{r}
markers_save <- markers

heatmap = heatmap
k = 8
markers = markers
m_sfe = D1
sample_id = "D1"
cluster_no = 7
cutree_cols = NA
fgwc = fgwc_list[['D1']]
sfe <- D1


sfe_tibble <- sfe[,heatmap$tree_col$labels]@colData  %>% as_tibble() #%>% filter(annotation %in% c("OS", "CS", "CMZ"))
```


```{r, eval = F}
library(SummarizedExperiment)
library(cols4all)
library(pheatmap)

# is there a better way of doing this? probably. Will I be doing it? ✨no✨
source('~/STexplorer/STExplorer-main/R/fgwc_plot.R')
source("~/STexplorer/STExplorer-main/R/fgwc_STE.R")

markers_save <- markers

heatmap = heatmap
k = 8
markers = markers
m_sfe = D1
sample_id = "D1"
cluster_no = 7
cutree_cols = NA
fgwc = fgwc_list[['D1']]
sfe <- D1


sfe_tibble <- sfe[,heatmap$tree_col$labels]@colData  %>% as_tibble() #%>% filter(annotation %in% c("OS", "CS", "CMZ"))



markers <- .int_markers(markers = markers)
marker_counts <- .int_fgwcMarkerCounts(sfe = sfe, markers = markers)
marker_clusts <- data.frame(cluster = fgwc$cluster, marker_counts)
pheat_in <- .int_pheatInput(marker_clusts = marker_clusts, 
                            cluster_no = cluster_no, markers = markers)
annot_row <- data.frame(Type = markers$Type, Subtype = markers$Subtype)
rownames(annot_row) <- make.unique(markers$gene.name)
annot_row <- annot_row %>% filter(rownames(.) %in% rownames(pheat_in)) %>% 
  arrange(.data[["Type"]])
col_type <- length(unique(markers$Type))
col_subT <- length(unique(markers$Subtype))
annot_colours <- list(Type = getColours(col_type), Subtype = c4a(palette = "carto.pastel", 
                                                                 n = col_subT))
names(annot_colours$Type) <- unique(markers$Type)
names(annot_colours$Subtype) <- unique(markers$Subtype)
gaps_row <- utils::head(as.numeric(cumsum(table(annot_row$Type))), 
                        -1)
paletteLength <- 25
c4a_palette <- c4a(palette = "tol.sunset")[c(1, 5, 9)]
ph.color <- colorRampPalette(c(c4a_palette[1], "white", 
                               c4a_palette[3]))(paletteLength)
ph.breaks <- c(seq(min(pheat_in), 0, length.out = ceiling(paletteLength/2) + 
                     1), seq(max(pheat_in)/paletteLength, max(pheat_in), 
                             length.out = floor(paletteLength/2)))

annotation_col <- sfe_tibble[sfe_tibble$Barcode %in% colnames(pheat_in), c("Barcode", "annotation")] %>% as.data.frame()
rownames(annotation_col) <- annotation_col$Barcode
annotation_col <- annotation_col[c("annotation")]
  
heatmap <- pheatmap(pheat_in, color = ph.color, breaks = ph.breaks, 
                    annotation_colors = annot_colours, annotation_row = annot_row, annotation_col = annotation_col,
                    gaps_row = gaps_row, cluster_rows = FALSE, show_colnames = TRUE,
                    cluster_cols = TRUE, cutree_cols = cutree_cols, main = paste0("Cluster ", 
                                                                                  cluster_no))
```

```{r}
plotQC_tissueImg(sfe[,sfe_tibble$Barcode], res = "hires", type = "hex", sample_id = "D1", annotate = TRUE, alpha = 0.3)
```




### Fig ?

```{r}
plotSpatialFeature(D1, c("annotation", 'fuzzy_winning_cl'), fill = NA,
                   aes_use = "color", linewidth = 0.5, colGeometryName = "spotPoly", image_id = 'hires',
                   annot_aes = list(fill = "area"), swap_rownames = "symbol")
```


<!-- ### Early RPC markers identified from initial publication -->

<!-- 8 genes were defined as early RPC markers: SFRP2, RAX, PAX6, VSX2, ZIC1, ZIC2, SIX3 and SIX6. -->

<!-- ZIC1 expression was confirmed in the OS and CMZ in all replicates as described in the initial publication. The remaining genes were shown to be expressed in the OS, CMZ and the retinal layers. -->

<!-- ```{r} -->

<!-- plotSpatialFeature(D1, early_RPC_markers[1:4], fill = NA, -->

<!--                    aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly",  -->

<!--                    image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name") -->

<!-- ``` -->

<!-- ```{r} -->

<!-- plotSpatialFeature(D1, early_RPC_markers[5:8], fill = NA, -->

<!--                    aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly",  -->

<!--                    image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name") -->

<!-- ``` -->

<!-- ```{r} -->

<!-- plotSpatialFeature(D1, c('MSX1'), fill = NA, -->

<!--                    aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly",  -->

<!--                    image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name") -->

<!-- ``` -->

## Markers identified by NMF


### D1

#### Factor03

```{r}
D1_nmf_genes <- D1_8PCW_HVG_nmf_factors %>% filter(str_detect(external_gene_name, "^MT|^RPS|^RPL|^HB", negate = TRUE)) %>% arrange(desc(NMF3))
```

```{r}
plotSpatialFeature(D1, D1_nmf_genes$external_gene_name[1:4], fill = NA,
                   aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly", 
                   image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name")
```

```{r}
plotSpatialFeature(D1, D1_nmf_genes$external_gene_name[5:8], fill = NA,
                   aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly", 
                   image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name")
```

```{r}
plotSpatialFeature(D1, D1_nmf_genes$external_gene_name[9:12], fill = NA,
                   aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly", 
                   image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name")
```

#### Factor04

```{r}
D1_nmf_genes <- D1_8PCW_HVG_nmf_factors %>% filter(str_detect(external_gene_name, "^MT|^RPS|^RPL", negate = TRUE)) %>% arrange(desc(NMF4))
```

```{r}
plotSpatialFeature(D1, D1_nmf_genes$external_gene_name[1:4], fill = NA,
                   aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly", 
                   image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name")
```

```{r}
plotSpatialFeature(D1, D1_nmf_genes$external_gene_name[5:8], fill = NA,
                   aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly", 
                   image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name")
```

```{r}
plotSpatialFeature(D1, D1_nmf_genes$external_gene_name[9:12], fill = NA,
                   aes_use = "color", linewidth = 0.5, #colGeometryName = "spotPoly", 
                   image_id = 'hires', annot_aes = list(fill = "area"), swap_rownames = "gene_name")
```


# Session info

```{r}
sessionInfo()
```
